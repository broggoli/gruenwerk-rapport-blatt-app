//output:registry.component.html
#registerPage
  #registerForm
      h2#registerTitle Registrierung
      
      form([formGroup]="registerForm" novalidate (ngSubmit)="register()" )
      
        #userNameinput( formGroupName="name")
        
          .container([ngClass] != "{'has-danger': firstName.invalid && (firstName.dirty || firstName.touched), 'has-success': firstName.valid && (firstName.dirty || firstName.touched) }")
            input(
            formControlName = "firstName"
            type="text" 
            placeholder="Vorname" 
            class="textInput" 
            id="registerFirstName" 
            name="firstName")
            
            .form-control-feedback(*ngIf!="firstName.errors && (firstName.dirty || firstName.touched) ")
              span(*ngIf!="firstName.errors.required") Geben Sie bitte ihren Vornamen ein.
              span(*ngIf!="firstName.errors.pattern") Geben Sie bitte nur ihren Vornamen ohne Abstand oder Sonderzeichen ein.
            
            br
            .container([ngClass] != "{'has-danger': lastName.invalid && (lastName.dirty || lastName.touched), 'has-success': lastName.valid && (lastName.dirty || lastName.touched) }")
              input(
              formControlName = "lastName"
              type="text"
              placeholder="Nachname"
              class="textInput"
              id="registerLastName"
              name="lastName"
              pattern="^[-'a-zA-ZÀ-ÖØ-öø-ſ]+$")
              .form-control-feedback(*ngIf!="lastName.errors && (lastName.dirty || lastName.touched) ")
                span(*ngIf!="lastName.errors.required") Geben Sie bitte ihren Nachnamen ein.
                span(*ngIf!="lastName.errors.pattern") Geben Sie bitte ihren Nachnamen ohne Abstand oder Sonderzeichen ein.
        #emailInput([ngClass] != "{'has-danger': email.invalid && (email.dirty || email.touched), 'has-success': email.valid && (email.dirty || email.touched) }")
            input(
            formControlName = "email"
            type="email" placeholder="Mail"
            class="textInput"
            id="email"
            name="email"
            pattern!="^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$")
            
            .form-control-feedback(*ngIf!="email.errors && (email.dirty || email.touched) ")
              span(*ngIf!="email.errors.required") Geben Sie bitte ihre Email-Adresse ein.
              span(*ngIf!="email.errors.pattern") Geben Sie bitte eine gültige Email-Adresse ein.
              
        #aboInput([ngClass] != "{'has-danger': abo.invalid && (abo.dirty || abo.touched), 'has-success': abo.valid && (abo.dirty || abo.touched) }")
            input(
            formControlName="abo"
            type="text"
            placeholder="ÖV-Abonement"
            class="textInput"
            id="abo"
            name="abo")
        
        #passwordInput( formGroupName="passwordInputs")
          .container([ngClass] != "{'has-danger': password.invalid && (password.dirty || password.touched), 'has-success': passwordInput.valid &&  password.valid && (password.dirty || password.touched) }")
            input(
            formControlName="password"
            type="password"
            placeholder="Passwort"
            class="textInput passwordInput"
            id="registerpassword"
            name="registerpassword")
            
            .form-control-feedback(*ngIf!="password.errors && (password.dirty || password.touched) ")
              span(*ngIf!="password.errors.required") Geben Sie bitte ein Passwort ein.
              span(*ngIf!="password.errors.minlength") Geben Sie bitte ein Passwort ein, das mindestens 6 Zeichen lang ist.
              
          .container([ngClass] != "{'has-danger': repeatPassword.invalid && (repeatPassword.dirty || repeatPassword.touched), 'has-success': passwordInput.valid && repeatPassword.valid && (repeatPassword.dirty || repeatPassword.touched) }")
            input( 
            formControlName="repeatPassword" 
            type="password"
            placeholder="Passwort wiederholen" 
            class="textInput passwordInput" 
            id="repeatPassword" 
            name="repeatPassword")
          
            .form-control-feedback(*ngIf!="repeatPassword.errors && (repeatPassword.dirty || repeatPassword.touched) ")
              span(*ngIf!="repeatPassword.errors.required") Geben Sie bitte ein Passwort ein.
              span(*ngIf!="repeatPassword.errors.minlength") Geben Sie bitte ein Passwort ein, das mindestens 6 Zeichen lang ist.
    
          //.form-control-feedback(*ngIf!="userPassword.errors && (userPassword.dirty || userPassword.touched) ")
          .form-control-feedback(*ngIf!="passwordInput.errors && (passwordInput.dirty || passwordInput.touched) && repeatPassword.valid && password.valid")
            span(*ngIf!="passwordInput.errors?.mismatch") Die Passwöter stimmen nicht überein.
          
        #startEndDateInput( formGroupName="date")
          .container([ngClass] != "{'has-danger': startDate.invalid && (startDate.dirty || startDate.touched), 'has-success': startDate.valid && (startDate.dirty || startDate.touched) }")
            label(for="startDate") Im Grünwerk von:
            input( 
            formControlName="startDate"
            type="date" 
            class="dateInput" 
            id="startDate" 
            name="start")
            
          .container([ngClass] != "{'has-danger': endDate.invalid && (endDate.dirty || endDate.touched), 'has-success': endDate.valid && (endDate.dirty || endDate.touched) }")
            label(for="endDate") Im Grünwerk bis:
            input(
            formControlName="endDate"
            type="date" 
            class="dateInput" 
            id="endDate" 
            name="end")
          
          .datesNotValidError
            .form-control-feedback(*ngIf!="(startDate.errors?.required || endDate.errors?.required) && (endDate.dirty || endDate.touched) && (startDate.dirty || startDate.touched)")
              span Geben Sie bitte zwei Gültige Daten ein.
          .endBeforeStartError
            .form-control-feedback(*ngIf!="dateInput.errors && (dateInput.dirty || dateInput.touched) && startDate.valid && endDate.valid")
              span(*ngIf!="dateInput.errors?.endBeforeStart") Geben Sie bitte ein End-Datum ein, das nach dem Anfangsatum ist.
        
        .form-control-feedback(*ngIf="registerForm.invalid") 
          span Sie müssen das Formular korrekt ausfüllen, bevor sie es abschicken können.
          
        .form-control-feedback(*ngIf="registerForm.valid && registerError != '' ")
          span Die Registrierung ist fehlgeschlagen.
          br
          span Error: {{ registerError }}
          
        .loadingAnim.svgAnim( style="display: none" )
          img( src="../../assets/svg/loader.svg" )
        .inputsChecked.svgAnim( style="display: none" )
          img( src="../../assets/svg/check.svg" )
          
        button#register.button([ngClass]="{'disabled': registerForm.invalid}" type="submit") Registrieren
      
      #backButton
          a(id='registerBackButton', routerLink="") Zurück zum Login
